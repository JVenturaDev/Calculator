{
  "version": 3,
  "sources": ["../../../../../../../node_modules/complex.js/dist/complex.mjs"],
  "sourcesContent": ["'use strict';\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * const c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n\nconst cosh = Math.cosh || function (x) {\n  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n};\n\nconst sinh = Math.sinh || function (x) {\n  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n};\n\n/**\n * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n *\n * @param {number} x\n * @returns {number} cos(x) - 1\n */\nconst cosm1 = function (x) {\n\n  const b = Math.PI / 4;\n  if (-b > x || x > b) {\n    return Math.cos(x) - 1.0;\n  }\n\n  /* Calculate horner form of polynomial of taylor series in Q\n  let fac = 1, alt = 1, pol = {};\n  for (let i = 0; i <= 16; i++) {\n    fac*= i || 1;\n    if (i % 2 == 0) {\n      pol[i] = new Fraction(1, alt * fac);\n      alt = -alt;\n    }\n  }\n  console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n  */\n\n  const xx = x * x;\n  return xx * (\n    xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx / 20922789888000\n                - 1 / 87178291200)\n              + 1 / 479001600)\n            - 1 / 3628800)\n          + 1 / 40320)\n        - 1 / 720)\n      + 1 / 24)\n    - 1 / 2);\n};\n\nconst hypot = function (x, y) {\n\n  x = Math.abs(x);\n  y = Math.abs(y);\n\n  // Ensure `x` is the larger value\n  if (x < y) [x, y] = [y, x];\n\n  // If both are below the threshold, use straightforward Pythagoras\n  if (x < 1e8) return Math.sqrt(x * x + y * y);\n\n  // For larger values, scale to avoid overflow\n  y /= x;\n  return x * Math.sqrt(1 + y * y);\n};\n\nconst parser_exit = function () {\n  throw SyntaxError('Invalid Param');\n};\n\n/**\n * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction logHypot(a, b) {\n\n  const _a = Math.abs(a);\n  const _b = Math.abs(b);\n\n  if (a === 0) {\n    return Math.log(_b);\n  }\n\n  if (b === 0) {\n    return Math.log(_a);\n  }\n\n  if (_a < 3000 && _b < 3000) {\n    return Math.log(a * a + b * b) * 0.5;\n  }\n\n  /* I got 4 ideas to compute this property without overflow:\n   *\n   * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n   *\n   * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n   Math.log(a * a + b * b) / 2\n\n   *\n   *\n   * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n   const fn = function(a, b) {\n   a = Math.abs(a);\n   b = Math.abs(b);\n   let t = Math.min(a, b);\n   a = Math.max(a, b);\n   t = t / a;\n\n   return Math.log(a) + Math.log(1 + t * t) / 2;\n   };\n\n   * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n   Math.log(a / Math.cos(Math.atan2(b, a)))\n\n   * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n   Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n   */\n\n  a = a * 0.5;\n  b = b * 0.5;\n\n  return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n}\n\nconst P = { 're': 0, 'im': 0 };\nconst parse = function (a, b) {\n\n  const z = P;\n\n  if (a === undefined || a === null) {\n    z['re'] =\n      z['im'] = 0;\n  } else if (b !== undefined) {\n    z['re'] = a;\n    z['im'] = b;\n  } else\n    switch (typeof a) {\n\n      case 'object':\n\n        if ('im' in a && 're' in a) {\n          z['re'] = a['re'];\n          z['im'] = a['im'];\n        } else if ('abs' in a && 'arg' in a) {\n          if (!isFinite(a['abs']) && isFinite(a['arg'])) {\n            return Complex['INFINITY'];\n          }\n          z['re'] = a['abs'] * Math.cos(a['arg']);\n          z['im'] = a['abs'] * Math.sin(a['arg']);\n        } else if ('r' in a && 'phi' in a) {\n          if (!isFinite(a['r']) && isFinite(a['phi'])) {\n            return Complex['INFINITY'];\n          }\n          z['re'] = a['r'] * Math.cos(a['phi']);\n          z['im'] = a['r'] * Math.sin(a['phi']);\n        } else if (a.length === 2) { // Quick array check\n          z['re'] = a[0];\n          z['im'] = a[1];\n        } else {\n          parser_exit();\n        }\n        break;\n\n      case 'string':\n\n        z['im'] = /* void */\n        z['re'] = 0;\n\n        const tokens = a.replace(/_/g, '')\n          .match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n        let plus = 1;\n        let minus = 0;\n\n        if (tokens === null) {\n          parser_exit();\n        }\n\n        for (let i = 0; i < tokens.length; i++) {\n\n          const c = tokens[i];\n\n          if (c === ' ' || c === '\\t' || c === '\\n') {\n            /* void */\n          } else if (c === '+') {\n            plus++;\n          } else if (c === '-') {\n            minus++;\n          } else if (c === 'i' || c === 'I') {\n\n            if (plus + minus === 0) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n              i++;\n            } else {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n            }\n            plus = minus = 0;\n\n          } else {\n\n            if (plus + minus === 0 || isNaN(c)) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n              i++;\n            } else {\n              z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n            }\n            plus = minus = 0;\n          }\n        }\n\n        // Still something on the stack\n        if (plus + minus > 0) {\n          parser_exit();\n        }\n        break;\n\n      case 'number':\n        z['im'] = 0;\n        z['re'] = a;\n        break;\n\n      default:\n        parser_exit();\n    }\n\n  if (isNaN(z['re']) || isNaN(z['im'])) {\n    // If a calculation is NaN, we treat it as NaN and don't throw\n    //parser_exit();\n  }\n\n  return z;\n};\n\n/**\n * @constructor\n * @returns {Complex}\n */\nfunction Complex(a, b) {\n\n  if (!(this instanceof Complex)) {\n    return new Complex(a, b);\n  }\n\n  const z = parse(a, b);\n\n  this['re'] = z['re'];\n  this['im'] = z['im'];\n}\n\nComplex.prototype = {\n\n  're': 0,\n  'im': 0,\n\n  /**\n   * Calculates the sign of a complex number, which is a normalized complex\n   *\n   * @returns {Complex}\n   */\n  'sign': function () {\n\n    const abs = hypot(this['re'], this['im']);\n\n    return new Complex(\n      this['re'] / abs,\n      this['im'] / abs);\n  },\n\n  /**\n   * Adds two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'add': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n\n    if (tInfin || zInfin) {\n\n      if (tInfin && zInfin) {\n        // Infinity + Infinity = NaN\n        return Complex['NAN'];\n      }\n      // Infinity + z = Infinity { where z != Infinity }\n      return Complex['INFINITY'];\n    }\n\n    return new Complex(\n      this['re'] + z['re'],\n      this['im'] + z['im']);\n  },\n\n  /**\n   * Subtracts two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'sub': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n\n    if (tInfin || zInfin) {\n\n      if (tInfin && zInfin) {\n        // Infinity - Infinity = NaN\n        return Complex['NAN'];\n      }\n      // Infinity - z = Infinity { where z != Infinity }\n      return Complex['INFINITY'];\n    }\n\n    return new Complex(\n      this['re'] - z['re'],\n      this['im'] - z['im']);\n  },\n\n  /**\n   * Multiplies two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'mul': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n    const tIsZero = this['re'] === 0 && this['im'] === 0;\n    const zIsZero = z['re'] === 0 && z['im'] === 0;\n\n    // Infinity * 0 = NaN\n    if (tInfin && zIsZero || zInfin && tIsZero) {\n      return Complex['NAN'];\n    }\n\n    // Infinity * z = Infinity { where z != 0 }\n    if (tInfin || zInfin) {\n      return Complex['INFINITY'];\n    }\n\n    // Shortcut for real values\n    if (z['im'] === 0 && this['im'] === 0) {\n      return new Complex(this['re'] * z['re'], 0);\n    }\n\n    return new Complex(\n      this['re'] * z['re'] - this['im'] * z['im'],\n      this['re'] * z['im'] + this['im'] * z['re']);\n  },\n\n  /**\n   * Divides two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'div': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n    const tIsZero = this['re'] === 0 && this['im'] === 0;\n    const zIsZero = z['re'] === 0 && z['im'] === 0;\n\n    // 0 / 0 = NaN and Infinity / Infinity = NaN\n    if (tIsZero && zIsZero || tInfin && zInfin) {\n      return Complex['NAN'];\n    }\n\n    // Infinity / 0 = Infinity\n    if (zIsZero || tInfin) {\n      return Complex['INFINITY'];\n    }\n\n    // 0 / Infinity = 0\n    if (tIsZero || zInfin) {\n      return Complex['ZERO'];\n    }\n\n    if (0 === z['im']) {\n      // Divisor is real\n      return new Complex(this['re'] / z['re'], this['im'] / z['re']);\n    }\n\n    if (Math.abs(z['re']) < Math.abs(z['im'])) {\n\n      const x = z['re'] / z['im'];\n      const t = z['re'] * x + z['im'];\n\n      return new Complex(\n        (this['re'] * x + this['im']) / t,\n        (this['im'] * x - this['re']) / t);\n\n    } else {\n\n      const x = z['im'] / z['re'];\n      const t = z['im'] * x + z['re'];\n\n      return new Complex(\n        (this['re'] + this['im'] * x) / t,\n        (this['im'] - this['re'] * x) / t);\n    }\n  },\n\n  /**\n   * Calculate the power of two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'pow': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tIsZero = this['re'] === 0 && this['im'] === 0;\n    const zIsZero = z['re'] === 0 && z['im'] === 0;\n\n    if (zIsZero) {\n      return Complex['ONE'];\n    }\n\n    // If the exponent is real\n    if (z['im'] === 0) {\n\n      if (this['im'] === 0 && this['re'] > 0) {\n\n        return new Complex(Math.pow(this['re'], z['re']), 0);\n\n      } else if (this['re'] === 0) { // If base is fully imaginary\n\n        switch ((z['re'] % 4 + 4) % 4) {\n          case 0:\n            return new Complex(Math.pow(this['im'], z['re']), 0);\n          case 1:\n            return new Complex(0, Math.pow(this['im'], z['re']));\n          case 2:\n            return new Complex(-Math.pow(this['im'], z['re']), 0);\n          case 3:\n            return new Complex(0, -Math.pow(this['im'], z['re']));\n        }\n      }\n    }\n\n    /* I couldn't find a good formula, so here is a derivation and optimization\n     *\n     * z_1^z_2 = (a + bi)^(c + di)\n     *         = exp((c + di) * log(a + bi)\n     *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n     * =>...\n     * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n     * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n     *\n     * =>...\n     * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n     * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n     *\n     * =>\n     * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n     * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n     *\n     */\n\n    if (tIsZero && z['re'] > 0) { // Same behavior as Wolframalpha, Zero if real part is zero\n      return Complex['ZERO'];\n    }\n\n    const arg = Math.atan2(this['im'], this['re']);\n    const loh = logHypot(this['re'], this['im']);\n\n    let re = Math.exp(z['re'] * loh - z['im'] * arg);\n    let im = z['im'] * loh + z['re'] * arg;\n    return new Complex(\n      re * Math.cos(im),\n      re * Math.sin(im));\n  },\n\n  /**\n   * Calculate the complex square root\n   *\n   * @returns {Complex}\n   */\n  'sqrt': function () {\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0) {\n      // Real number case\n      if (a >= 0) {\n        return new Complex(Math.sqrt(a), 0);\n      } else {\n        return new Complex(0, Math.sqrt(-a));\n      }\n    }\n\n    const r = hypot(a, b);\n\n    let re = Math.sqrt(0.5 * (r + Math.abs(a))); // sqrt(2x) / 2 = sqrt(x / 2)\n    let im = Math.abs(b) / (2 * re);\n\n    if (a >= 0) {\n      return new Complex(re, b < 0 ? -im : im);\n    } else {\n      return new Complex(im, b < 0 ? -re : re);\n    }\n  },\n\n  /**\n   * Calculate the complex exponent\n   *\n   * @returns {Complex}\n   */\n  'exp': function () {\n\n    const er = Math.exp(this['re']);\n\n    if (this['im'] === 0) {\n      return new Complex(er, 0);\n    }\n    return new Complex(\n      er * Math.cos(this['im']),\n      er * Math.sin(this['im']));\n  },\n\n  /**\n   * Calculate the complex exponent and subtracts one.\n   *\n   * This may be more accurate than `Complex(x).exp().sub(1)` if\n   * `x` is small.\n   *\n   * @returns {Complex}\n   */\n  'expm1': function () {\n\n    /**\n     * exp(a + i*b) - 1\n     = exp(a) * (cos(b) + j*sin(b)) - 1\n     = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n     */\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      Math.expm1(a) * Math.cos(b) + cosm1(b),\n      Math.exp(a) * Math.sin(b));\n  },\n\n  /**\n   * Calculate the natural log\n   *\n   * @returns {Complex}\n   */\n  'log': function () {\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0 && a > 0) {\n      return new Complex(Math.log(a), 0);\n    }\n\n    return new Complex(\n      logHypot(a, b),\n      Math.atan2(b, a));\n  },\n\n  /**\n   * Calculate the magnitude of the complex number\n   *\n   * @returns {number}\n   */\n  'abs': function () {\n\n    return hypot(this['re'], this['im']);\n  },\n\n  /**\n   * Calculate the angle of the complex number\n   *\n   * @returns {number}\n   */\n  'arg': function () {\n\n    return Math.atan2(this['im'], this['re']);\n  },\n\n  /**\n   * Calculate the sine of the complex number\n   *\n   * @returns {Complex}\n   */\n  'sin': function () {\n\n    // sin(z) = ( e^iz - e^-iz ) / 2i \n    //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      Math.sin(a) * cosh(b),\n      Math.cos(a) * sinh(b));\n  },\n\n  /**\n   * Calculate the cosine\n   *\n   * @returns {Complex}\n   */\n  'cos': function () {\n\n    // cos(z) = ( e^iz + e^-iz ) / 2 \n    //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      Math.cos(a) * cosh(b),\n      -Math.sin(a) * sinh(b));\n  },\n\n  /**\n   * Calculate the tangent\n   *\n   * @returns {Complex}\n   */\n  'tan': function () {\n\n    // tan(z) = sin(z) / cos(z) \n    //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n    //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n    //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = Math.cos(a) + cosh(b);\n\n    return new Complex(\n      Math.sin(a) / d,\n      sinh(b) / d);\n  },\n\n  /**\n   * Calculate the cotangent\n   *\n   * @returns {Complex}\n   */\n  'cot': function () {\n\n    // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = Math.cos(a) - cosh(b);\n\n    return new Complex(\n      -Math.sin(a) / d,\n      sinh(b) / d);\n  },\n\n  /**\n   * Calculate the secant\n   *\n   * @returns {Complex}\n   */\n  'sec': function () {\n\n    // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n    return new Complex(\n      Math.cos(a) * cosh(b) / d,\n      Math.sin(a) * sinh(b) / d);\n  },\n\n  /**\n   * Calculate the cosecans\n   *\n   * @returns {Complex}\n   */\n  'csc': function () {\n\n    // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n    return new Complex(\n      Math.sin(a) * cosh(b) / d,\n      -Math.cos(a) * sinh(b) / d);\n  },\n\n  /**\n   * Calculate the complex arcus sinus\n   *\n   * @returns {Complex}\n   */\n  'asin': function () {\n\n    // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const t1 = new Complex(\n      b * b - a * a + 1,\n      -2 * a * b)['sqrt']();\n\n    const t2 = new Complex(\n      t1['re'] - b,\n      t1['im'] + a)['log']();\n\n    return new Complex(t2['im'], -t2['re']);\n  },\n\n  /**\n   * Calculate the complex arcus cosinus\n   *\n   * @returns {Complex}\n   */\n  'acos': function () {\n\n    // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const t1 = new Complex(\n      b * b - a * a + 1,\n      -2 * a * b)['sqrt']();\n\n    const t2 = new Complex(\n      t1['re'] - b,\n      t1['im'] + a)['log']();\n\n    return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n  },\n\n  /**\n   * Calculate the complex arcus tangent\n   *\n   * @returns {Complex}\n   */\n  'atan': function () {\n\n    // atan(c) = i / 2 log((i + x) / (i - x))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0) {\n\n      if (b === 1) {\n        return new Complex(0, Infinity);\n      }\n\n      if (b === -1) {\n        return new Complex(0, -Infinity);\n      }\n    }\n\n    const d = a * a + (1.0 - b) * (1.0 - b);\n\n    const t1 = new Complex(\n      (1 - b * b - a * a) / d,\n      -2 * a / d).log();\n\n    return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n  },\n\n  /**\n   * Calculate the complex arcus cotangent\n   *\n   * @returns {Complex}\n   */\n  'acot': function () {\n\n    // acot(c) = i / 2 log((c - i) / (c + i))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0) {\n      return new Complex(Math.atan2(1, a), 0);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).atan()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).atan();\n  },\n\n  /**\n   * Calculate the complex arcus secant\n   *\n   * @returns {Complex}\n   */\n  'asec': function () {\n\n    // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0 && b === 0) {\n      return new Complex(0, Infinity);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).acos()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).acos();\n  },\n\n  /**\n   * Calculate the complex arcus cosecans\n   *\n   * @returns {Complex}\n   */\n  'acsc': function () {\n\n    // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0 && b === 0) {\n      return new Complex(Math.PI / 2, Infinity);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).asin()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).asin();\n  },\n\n  /**\n   * Calculate the complex sinh\n   *\n   * @returns {Complex}\n   */\n  'sinh': function () {\n\n    // sinh(c) = (e^c - e^-c) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      sinh(a) * Math.cos(b),\n      cosh(a) * Math.sin(b));\n  },\n\n  /**\n   * Calculate the complex cosh\n   *\n   * @returns {Complex}\n   */\n  'cosh': function () {\n\n    // cosh(c) = (e^c + e^-c) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      cosh(a) * Math.cos(b),\n      sinh(a) * Math.sin(b));\n  },\n\n  /**\n   * Calculate the complex tanh\n   *\n   * @returns {Complex}\n   */\n  'tanh': function () {\n\n    // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = cosh(a) + Math.cos(b);\n\n    return new Complex(\n      sinh(a) / d,\n      Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex coth\n   *\n   * @returns {Complex}\n   */\n  'coth': function () {\n\n    // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = cosh(a) - Math.cos(b);\n\n    return new Complex(\n      sinh(a) / d,\n      -Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex coth\n   *\n   * @returns {Complex}\n   */\n  'csch': function () {\n\n    // csch(c) = 2 / (e^c - e^-c)\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = Math.cos(2 * b) - cosh(2 * a);\n\n    return new Complex(\n      -2 * sinh(a) * Math.cos(b) / d,\n      2 * cosh(a) * Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex sech\n   *\n   * @returns {Complex}\n   */\n  'sech': function () {\n\n    // sech(c) = 2 / (e^c + e^-c)\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = Math.cos(2 * b) + cosh(2 * a);\n\n    return new Complex(\n      2 * cosh(a) * Math.cos(b) / d,\n      -2 * sinh(a) * Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex asinh\n   *\n   * @returns {Complex}\n   */\n  'asinh': function () {\n\n    // asinh(c) = log(c + sqrt(c^2 + 1))\n\n    let tmp = this['im'];\n    this['im'] = -this['re'];\n    this['re'] = tmp;\n    const res = this['asin']();\n\n    this['re'] = -this['im'];\n    this['im'] = tmp;\n    tmp = res['re'];\n\n    res['re'] = -res['im'];\n    res['im'] = tmp;\n    return res;\n  },\n\n  /**\n   * Calculate the complex acosh\n   *\n   * @returns {Complex}\n   */\n  'acosh': function () {\n\n    // acosh(c) = log(c + sqrt(c^2 - 1))\n\n    const res = this['acos']();\n    if (res['im'] <= 0) {\n      const tmp = res['re'];\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n    } else {\n      const tmp = res['im'];\n      res['im'] = -res['re'];\n      res['re'] = tmp;\n    }\n    return res;\n  },\n\n  /**\n   * Calculate the complex atanh\n   *\n   * @returns {Complex}\n   */\n  'atanh': function () {\n\n    // atanh(c) = log((1+c) / (1-c)) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const noIM = a > 1 && b === 0;\n    const oneMinus = 1 - a;\n    const onePlus = 1 + a;\n    const d = oneMinus * oneMinus + b * b;\n\n    const x = (d !== 0)\n      ? new Complex(\n        (onePlus * oneMinus - b * b) / d,\n        (b * oneMinus + onePlus * b) / d)\n      : new Complex(\n        (a !== -1) ? (a / 0) : 0,\n        (b !== 0) ? (b / 0) : 0);\n\n    const temp = x['re'];\n    x['re'] = logHypot(x['re'], x['im']) / 2;\n    x['im'] = Math.atan2(x['im'], temp) / 2;\n    if (noIM) {\n      x['im'] = -x['im'];\n    }\n    return x;\n  },\n\n  /**\n   * Calculate the complex acoth\n   *\n   * @returns {Complex}\n   */\n  'acoth': function () {\n\n    // acoth(c) = log((c+1) / (c-1)) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0 && b === 0) {\n      return new Complex(0, Math.PI / 2);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).atanh()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).atanh();\n  },\n\n  /**\n   * Calculate the complex acsch\n   *\n   * @returns {Complex}\n   */\n  'acsch': function () {\n\n    // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0) {\n\n      return new Complex(\n        (a !== 0)\n          ? Math.log(a + Math.sqrt(a * a + 1))\n          : Infinity, 0);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).asinh()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).asinh();\n  },\n\n  /**\n   * Calculate the complex asech\n   *\n   * @returns {Complex}\n   */\n  'asech': function () {\n\n    // asech(c) = log((1+sqrt(1-c^2))/c)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (this['isZero']()) {\n      return Complex['INFINITY'];\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).acosh()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).acosh();\n  },\n\n  /**\n   * Calculate the complex inverse 1/z\n   *\n   * @returns {Complex}\n   */\n  'inverse': function () {\n\n    // 1 / 0 = Infinity and 1 / Infinity = 0\n    if (this['isZero']()) {\n      return Complex['INFINITY'];\n    }\n\n    if (this['isInfinite']()) {\n      return Complex['ZERO'];\n    }\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const d = a * a + b * b;\n\n    return new Complex(a / d, -b / d);\n  },\n\n  /**\n   * Returns the complex conjugate\n   *\n   * @returns {Complex}\n   */\n  'conjugate': function () {\n\n    return new Complex(this['re'], -this['im']);\n  },\n\n  /**\n   * Gets the negated complex number\n   *\n   * @returns {Complex}\n   */\n  'neg': function () {\n\n    return new Complex(-this['re'], -this['im']);\n  },\n\n  /**\n   * Ceils the actual complex number\n   *\n   * @returns {Complex}\n   */\n  'ceil': function (places) {\n\n    places = Math.pow(10, places || 0);\n\n    return new Complex(\n      Math.ceil(this['re'] * places) / places,\n      Math.ceil(this['im'] * places) / places);\n  },\n\n  /**\n   * Floors the actual complex number\n   *\n   * @returns {Complex}\n   */\n  'floor': function (places) {\n\n    places = Math.pow(10, places || 0);\n\n    return new Complex(\n      Math.floor(this['re'] * places) / places,\n      Math.floor(this['im'] * places) / places);\n  },\n\n  /**\n   * Ceils the actual complex number\n   *\n   * @returns {Complex}\n   */\n  'round': function (places) {\n\n    places = Math.pow(10, places || 0);\n\n    return new Complex(\n      Math.round(this['re'] * places) / places,\n      Math.round(this['im'] * places) / places);\n  },\n\n  /**\n   * Compares two complex numbers\n   *\n   * **Note:** new Complex(Infinity).equals(Infinity) === false\n   *\n   * @returns {boolean}\n   */\n  'equals': function (a, b) {\n\n    const z = parse(a, b);\n\n    return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n      Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n  },\n\n  /**\n   * Clones the actual object\n   *\n   * @returns {Complex}\n   */\n  'clone': function () {\n\n    return new Complex(this['re'], this['im']);\n  },\n\n  /**\n   * Gets a string of the actual complex number\n   *\n   * @returns {string}\n   */\n  'toString': function () {\n\n    let a = this['re'];\n    let b = this['im'];\n    let ret = \"\";\n\n    if (this['isNaN']()) {\n      return 'NaN';\n    }\n\n    if (this['isInfinite']()) {\n      return 'Infinity';\n    }\n\n    if (Math.abs(a) < Complex['EPSILON']) {\n      a = 0;\n    }\n\n    if (Math.abs(b) < Complex['EPSILON']) {\n      b = 0;\n    }\n\n    // If is real number\n    if (b === 0) {\n      return ret + a;\n    }\n\n    if (a !== 0) {\n      ret += a;\n      ret += \" \";\n      if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      } else {\n        ret += \"+\";\n      }\n      ret += \" \";\n    } else if (b < 0) {\n      b = -b;\n      ret += \"-\";\n    }\n\n    if (1 !== b) { // b is the absolute imaginary part\n      ret += b;\n    }\n    return ret + \"i\";\n  },\n\n  /**\n   * Returns the actual number as a vector\n   *\n   * @returns {Array}\n   */\n  'toVector': function () {\n\n    return [this['re'], this['im']];\n  },\n\n  /**\n   * Returns the actual real value of the current object\n   *\n   * @returns {number|null}\n   */\n  'valueOf': function () {\n\n    if (this['im'] === 0) {\n      return this['re'];\n    }\n    return null;\n  },\n\n  /**\n   * Determines whether a complex number is not on the Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isNaN': function () {\n    return isNaN(this['re']) || isNaN(this['im']);\n  },\n\n  /**\n   * Determines whether or not a complex number is at the zero pole of the\n   * Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isZero': function () {\n    return this['im'] === 0 && this['re'] === 0;\n  },\n\n  /**\n   * Determines whether a complex number is not at the infinity pole of the\n   * Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isFinite': function () {\n    return isFinite(this['re']) && isFinite(this['im']);\n  },\n\n  /**\n   * Determines whether or not a complex number is at the infinity pole of the\n   * Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isInfinite': function () {\n    return !this['isFinite']();\n  }\n};\n\nComplex['ZERO'] = new Complex(0, 0);\nComplex['ONE'] = new Complex(1, 0);\nComplex['I'] = new Complex(0, 1);\nComplex['PI'] = new Complex(Math.PI, 0);\nComplex['E'] = new Complex(Math.E, 0);\nComplex['INFINITY'] = new Complex(Infinity, Infinity);\nComplex['NAN'] = new Complex(NaN, NaN);\nComplex['EPSILON'] = 1e-15;\nexport {\n  Complex as default, Complex\n};\n"],
  "mappings": "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",
  "names": []
}
